// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    user_id, state
) VALUES (
    $1, $2
)
RETURNING id, user_id, state
`

type CreateTaskParams struct {
	UserID uuid.NullUUID
	State  pqtype.NullRawMessage
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.UserID, arg.State)
	var i Task
	err := row.Scan(&i.ID, &i.UserID, &i.State)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, token, email, refresh_token, expire_at
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, name, email, token, refresh_token, expire_at
`

type CreateUserParams struct {
	Name         string
	Token        string
	Email        string
	RefreshToken string
	ExpireAt     sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Token,
		arg.Email,
		arg.RefreshToken,
		arg.ExpireAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.ExpireAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, user_id, state FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(&i.ID, &i.UserID, &i.State)
	return i, err
}

const getTaskFromUserID = `-- name: GetTaskFromUserID :many
SELECT id, user_id, state FROM tasks
WHERE user_id = $1
`

func (q *Queries) GetTaskFromUserID(ctx context.Context, userID uuid.NullUUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTaskFromUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.UserID, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, token, refresh_token, expire_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.ExpireAt,
	)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT id, name, email, token, refresh_token, expire_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.ExpireAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, state FROM tasks
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.UserID, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, token, refresh_token, expire_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Token,
			&i.RefreshToken,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
set state = $2
WHERE id = $1
`

type UpdateTaskParams struct {
	ID    uuid.UUID
	State pqtype.NullRawMessage
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.ID, arg.State)
	return err
}

const updateUserToken = `-- name: UpdateUserToken :exec
UPDATE users
set token = $2,
    refresh_token = $3,
    expire_at = $4
WHERE id = $1
`

type UpdateUserTokenParams struct {
	ID           uuid.UUID
	Token        string
	RefreshToken string
	ExpireAt     sql.NullTime
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateUserToken,
		arg.ID,
		arg.Token,
		arg.RefreshToken,
		arg.ExpireAt,
	)
	return err
}
