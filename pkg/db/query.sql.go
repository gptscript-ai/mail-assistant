// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContext = `-- name: CreateContext :one
INSERT INTO contexts (
    name, description, content, user_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, description, content, user_id, created_at
`

type CreateContextParams struct {
	Name        *string
	Description *string
	Content     *string
	UserID      pgtype.UUID
}

func (q *Queries) CreateContext(ctx context.Context, arg CreateContextParams) (Context, error) {
	row := q.db.QueryRow(ctx, createContext,
		arg.Name,
		arg.Description,
		arg.Content,
		arg.UserID,
	)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (
    message_id, task_id, content, user_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, message_id, task_id, content, user_id, created_at, read
`

type CreateMessageParams struct {
	MessageID *string
	TaskID    pgtype.UUID
	Content   *string
	UserID    pgtype.UUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage,
		arg.MessageID,
		arg.TaskID,
		arg.Content,
		arg.UserID,
	)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    user_id, name, state, description, tool_definition, context, message_id, message_body, context_ids
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, description, tool_definition, context, created_at, user_id, message_id, message_body, conversation_id, context_ids, state
`

type CreateTaskParams struct {
	UserID         pgtype.UUID
	Name           string
	State          []byte
	Description    string
	ToolDefinition *string
	Context        *string
	MessageID      *string
	MessageBody    *string
	ContextIds     []pgtype.UUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.UserID,
		arg.Name,
		arg.State,
		arg.Description,
		arg.ToolDefinition,
		arg.Context,
		arg.MessageID,
		arg.MessageBody,
		arg.ContextIds,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ToolDefinition,
		&i.Context,
		&i.CreatedAt,
		&i.UserID,
		&i.MessageID,
		&i.MessageBody,
		&i.ConversationID,
		&i.ContextIds,
		&i.State,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, token, refresh_token, email, expire_at
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, name, email, token, refresh_token, subscription_id, subscription_expire_at, subscription_disabled, expire_at
`

type CreateUserParams struct {
	Name         string
	Token        string
	RefreshToken *string
	Email        string
	ExpireAt     pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Token,
		arg.RefreshToken,
		arg.Email,
		arg.ExpireAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.SubscriptionID,
		&i.SubscriptionExpireAt,
		&i.SubscriptionDisabled,
		&i.ExpireAt,
	)
	return i, err
}

const deleteContext = `-- name: DeleteContext :exec
DELETE FROM contexts
WHERE id = $1
`

func (q *Queries) DeleteContext(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContext, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getContext = `-- name: GetContext :one
SELECT id, name, description, content, user_id, created_at FROM contexts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContext(ctx context.Context, id pgtype.UUID) (Context, error) {
	row := q.db.QueryRow(ctx, getContext, id)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageFromMessageID = `-- name: GetMessageFromMessageID :one
SELECT id, message_id, task_id, content, user_id, created_at, read FROM messages
WHERE message_id = $1 LIMIT 1
`

func (q *Queries) GetMessageFromMessageID(ctx context.Context, messageID *string) (Message, error) {
	row := q.db.QueryRow(ctx, getMessageFromMessageID, messageID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.TaskID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.Read,
	)
	return i, err
}

const getMessageFromUserID = `-- name: GetMessageFromUserID :many
SELECT id, message_id, task_id, content, user_id, created_at, read FROM messages
WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetMessageFromUserID(ctx context.Context, userID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessageFromUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.TaskID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.Read,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageFromUserIDAndTaskID = `-- name: GetMessageFromUserIDAndTaskID :many
SELECT id, message_id, task_id, content, user_id, created_at, read FROM messages
WHERE user_id = $1 and task_id = $2 ORDER BY created_at DESC
`

type GetMessageFromUserIDAndTaskIDParams struct {
	UserID pgtype.UUID
	TaskID pgtype.UUID
}

func (q *Queries) GetMessageFromUserIDAndTaskID(ctx context.Context, arg GetMessageFromUserIDAndTaskIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessageFromUserIDAndTaskID, arg.UserID, arg.TaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.TaskID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.Read,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, name, description, tool_definition, context, created_at, user_id, message_id, message_body, conversation_id, context_ids, state FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ToolDefinition,
		&i.Context,
		&i.CreatedAt,
		&i.UserID,
		&i.MessageID,
		&i.MessageBody,
		&i.ConversationID,
		&i.ContextIds,
		&i.State,
	)
	return i, err
}

const getTaskFromConversationID = `-- name: GetTaskFromConversationID :one
SELECT id, name, description, tool_definition, context, created_at, user_id, message_id, message_body, conversation_id, context_ids, state FROM tasks
WHERE conversation_id = $1 LIMIT 1
`

func (q *Queries) GetTaskFromConversationID(ctx context.Context, conversationID *string) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskFromConversationID, conversationID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ToolDefinition,
		&i.Context,
		&i.CreatedAt,
		&i.UserID,
		&i.MessageID,
		&i.MessageBody,
		&i.ConversationID,
		&i.ContextIds,
		&i.State,
	)
	return i, err
}

const getTaskFromUserID = `-- name: GetTaskFromUserID :many
SELECT id, name, description, tool_definition, context, created_at, user_id, message_id, message_body, conversation_id, context_ids, state FROM tasks
WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetTaskFromUserID(ctx context.Context, userID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTaskFromUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ToolDefinition,
			&i.Context,
			&i.CreatedAt,
			&i.UserID,
			&i.MessageID,
			&i.MessageBody,
			&i.ConversationID,
			&i.ContextIds,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, token, refresh_token, subscription_id, subscription_expire_at, subscription_disabled, expire_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.SubscriptionID,
		&i.SubscriptionExpireAt,
		&i.SubscriptionDisabled,
		&i.ExpireAt,
	)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT id, name, email, token, refresh_token, subscription_id, subscription_expire_at, subscription_disabled, expire_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.SubscriptionID,
		&i.SubscriptionExpireAt,
		&i.SubscriptionDisabled,
		&i.ExpireAt,
	)
	return i, err
}

const getUserFromSubscriptionID = `-- name: GetUserFromSubscriptionID :one
SELECT id, name, email, token, refresh_token, subscription_id, subscription_expire_at, subscription_disabled, expire_at FROM users
WHERE subscription_id = $1 LIMIT 1
`

func (q *Queries) GetUserFromSubscriptionID(ctx context.Context, subscriptionID *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromSubscriptionID, subscriptionID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Token,
		&i.RefreshToken,
		&i.SubscriptionID,
		&i.SubscriptionExpireAt,
		&i.SubscriptionDisabled,
		&i.ExpireAt,
	)
	return i, err
}

const listContextsForUser = `-- name: ListContextsForUser :many
SELECT id, name, description, content, user_id, created_at FROM contexts WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListContextsForUser(ctx context.Context, userID pgtype.UUID) ([]Context, error) {
	rows, err := q.db.Query(ctx, listContextsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Context
	for rows.Next() {
		var i Context
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, token, refresh_token, subscription_id, subscription_expire_at, subscription_disabled, expire_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Token,
			&i.RefreshToken,
			&i.SubscriptionID,
			&i.SubscriptionExpireAt,
			&i.SubscriptionDisabled,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContext = `-- name: UpdateContext :exec
UPDATE contexts
SET name = $2,
    description = $3,
    content = $4
WHERE id = $1
`

type UpdateContextParams struct {
	ID          pgtype.UUID
	Name        *string
	Description *string
	Content     *string
}

func (q *Queries) UpdateContext(ctx context.Context, arg UpdateContextParams) error {
	_, err := q.db.Exec(ctx, updateContext,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Content,
	)
	return err
}

const updateMessageRead = `-- name: UpdateMessageRead :exec
UPDATE messages
set read = $2
WHERE id = $1
`

type UpdateMessageReadParams struct {
	ID   pgtype.UUID
	Read *bool
}

func (q *Queries) UpdateMessageRead(ctx context.Context, arg UpdateMessageReadParams) error {
	_, err := q.db.Exec(ctx, updateMessageRead, arg.ID, arg.Read)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET name = $2,
    description = $3,
    context = $4,
    context_ids = $5
WHERE id = $1
`

type UpdateTaskParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	Context     *string
	ContextIds  []pgtype.UUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Context,
		arg.ContextIds,
	)
	return err
}

const updateTaskConversationID = `-- name: UpdateTaskConversationID :exec
UPDATE tasks
set conversation_id = $2
WHERE id = $1
`

type UpdateTaskConversationIDParams struct {
	ID             pgtype.UUID
	ConversationID *string
}

func (q *Queries) UpdateTaskConversationID(ctx context.Context, arg UpdateTaskConversationIDParams) error {
	_, err := q.db.Exec(ctx, updateTaskConversationID, arg.ID, arg.ConversationID)
	return err
}

const updateTaskState = `-- name: UpdateTaskState :exec
UPDATE tasks
set state = $2
WHERE id = $1
`

type UpdateTaskStateParams struct {
	ID    pgtype.UUID
	State []byte
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) error {
	_, err := q.db.Exec(ctx, updateTaskState, arg.ID, arg.State)
	return err
}

const updateTaskStateToNull = `-- name: UpdateTaskStateToNull :exec
UPDATE tasks
set state = null
WHERE id = $1
`

func (q *Queries) UpdateTaskStateToNull(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateTaskStateToNull, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set token = $2,
    refresh_token = $3,
    expire_at = $4,
    subscription_id = $5,
    subscription_expire_at = $6,
    subscription_disabled = $7
WHERE id = $1
`

type UpdateUserParams struct {
	ID                   pgtype.UUID
	Token                string
	RefreshToken         *string
	ExpireAt             pgtype.Timestamptz
	SubscriptionID       *string
	SubscriptionExpireAt pgtype.Timestamptz
	SubscriptionDisabled *bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Token,
		arg.RefreshToken,
		arg.ExpireAt,
		arg.SubscriptionID,
		arg.SubscriptionExpireAt,
		arg.SubscriptionDisabled,
	)
	return err
}
